{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GlobalFilter","globalFilter","setGlobalFilter","Form","Group","controlId","Control","type","size","placeholder","value","onChange","e","target","undefined","fuzzyTextFilterFn","rows","id","filterValue","matchSorter","keys","row","values","autoRemove","val","App","props","useState","data","sheet","setSheet","useEffect","Tabletop","init","key","callback","_","tabletop","console","log","sheets","all","simpleSheet","React","useMemo","filter","obj","Business","length","columns","Header","accessor","filterTypes","fuzzyText","text","rowValue","String","toLowerCase","startsWith","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","preGlobalFilteredRows","className","Table","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a381f7a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Tabletop from 'tabletop';\nimport {useTable, useFilters, useGlobalFilter} from 'react-table';\nimport matchSorter from 'match-sorter';\nimport {Form, Table} from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction GlobalFilter({\n  globalFilter,\n  setGlobalFilter,\n}) {\n  return (\n    <Form>\n      <Form.Group controlId=\"searchForm\">\n        <Form.Control\n          type=\"text\"\n          size=\"lg\"\n          placeholder=\"Type here to search\"\n          value={globalFilter || ''}\n          onChange={e => {\n            setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n          }}\n          />\n      </Form.Group>\n    </Form>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\nfuzzyTextFilterFn.autoRemove = val => !val\n\nconst App = (props) => {\n  const [sheet, setSheet] = useState({\n    data: [],\n  })\n\n  useEffect(() => {\n    Tabletop.init({\n      key: '1asa5VMdHOr4LTOx34EPGxkN90Oy48niuPjCQu83cx_s',\n      callback: (_, tabletop) => {\n        console.log(tabletop);\n        setSheet({\n          data: tabletop.sheets('Master').all()\n        })\n      },\n      simpleSheet: true\n    })\n  }, [])\n\n  const data = React.useMemo(\n    () => sheet.data.filter(obj => obj.Business.length > 1),\n    [sheet]\n  );\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'Business'\n      },\n      {\n        Header: 'Status',\n        accessor: 'Open?'\n      },\n      {\n        Header: 'What is available',\n        accessor: 'What is available'\n      },\n      {\n        Header: 'Type of business',\n        accessor: 'Category'\n      },\n      {\n        Header: 'Neighbourhood',\n        accessor: 'Neighbourhood'\n      },\n      {\n        Header: 'Website',\n        accessor: 'WebsiteURL'\n      },\n      {\n        Header: 'Facebook',\n        accessor: 'FacebookURL'\n      },\n      {\n        Header: 'Phone',\n        accessor: 'Phone'\n      },\n      {\n        Header: 'Address',\n        accessor: 'Address'\n      }\n    ],\n    [],\n  );\n\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  );\n\n  const { \n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns, \n      data,\n      filterTypes,\n    },\n    useFilters,\n    useGlobalFilter,\n  )\n  \n\n  return (\n    <div className=\"App\">\n    <GlobalFilter\n      preGlobalFilteredRows={preGlobalFilteredRows}\n      globalFilter={state.globalFilter}\n      setGlobalFilter={setGlobalFilter}\n    />\n    <Table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row)\n        return (\n          <tr {...row.getRowProps()}>\n            {row.cells.map(cell => {\n              return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n            })}\n          </tr>\n        )\n      })}\n    </tbody>\n    </Table>\n  </div>)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}